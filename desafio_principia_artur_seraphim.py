# -*- coding: utf-8 -*-
"""Desafio Principia Artur Seraphim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2WTY6SigQLQWIV0Z8tNFERm4qrYi-lF

#Instalando e Importando bibliotecas necessárias
"""

pip install validate-docbr

pip install validate_email_address

import pandas as pd
from validate_docbr import CPF
from datetime import datetime
import re
from validate_email_address import validate_email

"""#Importando bases de dados"""

df = pd.read_excel('/content/dados.xlsx')
df_sistema = pd.read_excel('/content/sistema.xlsx')
df.drop_duplicates(inplace=True)
df_sistema.drop_duplicates(inplace=True)

"""#Validação CPF"""

def validar_cpf(cpf):
    return CPF().validate(cpf)

def limpar_cpf(cpf):
    return ''.join(filter(str.isdigit, str(cpf)))

def validar_clientes(excel_file):

    df['CPF'] = df['CPF'].apply(limpar_cpf)

    df['cpf_valido'] = df['CPF'].apply(validar_cpf)

    cpfs_invalidos = df[~df['cpf_valido']]

    if not cpfs_invalidos.empty:
        for index, row in cpfs_invalidos.iterrows():
            print(f"Cliente com CPF inválido: {row['NOME']}")
    else:
        print("Todos os CPFs são válidos")

validar_clientes('/content/dados.xlsx')

"""#Validação Emails"""

def validar_email(df, email_coluna='Email'):
    nomes_com_erros = []
    for index, row in df.iterrows():
        email = row[email_coluna]
        if not validate_email(email):
            nomes_com_erros.append(row['NOME'])
    if nomes_com_erros:
        print("Os seguintes nomes têm emails inválidos:")
        for nome in nomes_com_erros:
            print(nome)
    else:
        print("Todos os emails estão corretos")

validar_email(df)

"""#Validação data de nascimento"""

df['Data de Nascimento'] = pd.to_datetime(df['Data de Nascimento'], errors='coerce')

# Salva o arquivo Excel modificado
df.to_excel('/content/dados.xlsx', index=False)
df

